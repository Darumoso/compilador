KeywordFunc((0, 0))
------> func
KeywordMain((0, 5))
------> main
PunctuationLParent((0, 10))
------> (
PunctuationRParent((0, 11))
------> )
PunctuationLCurly((0, 13))
------> {
KeywordLet((3, 4))
------> let
Identifier((3, 8))
------> hola
OperatorEqual((3, 13))
------> =
ConstantNumeric((3, 15))
------> 45
PunctuationSemiColon((3, 17))
------> ;
KeywordLet((4, 4))
------> let
Identifier((4, 8))
------> HolaMundo
OperatorEqual((4, 18))
------> =
StringLiteral((4, 20))
------> "Hola mundo"
PunctuationSemiColon((4, 32))
------> ;
KeywordLet((6, 4))
------> let
Identifier((6, 8))
------> numero1
OperatorEqual((6, 16))
------> =
ConstantNumeric((6, 18))
------> 35
PunctuationSemiColon((6, 20))
------> ;
KeywordLet((7, 4))
------> let
Identifier((7, 8))
------> numero2
OperatorEqual((7, 16))
------> =
ConstantNumeric((7, 18))
------> 33.4
PunctuationSemiColon((7, 22))
------> ;
KeywordLet((8, 4))
------> let
Identifier((8, 8))
------> numero3
OperatorEqual((8, 16))
------> =
ConstantNumeric((8, 18))
------> 1_000_000
PunctuationSemiColon((8, 27))
------> ;
KeywordLet((9, 1))
------> let
Identifier((9, 5))
------> numero4
OperatorEqual((9, 13))
------> =
ConstantNumeric((9, 16))
------> 4e4
KeywordLet((11, 1))
------> let
Identifier((11, 5))
------> letra
OperatorEqual((11, 11))
------> =
ConstantChar((11, 13))
------> 'c'
PunctuationSemiColon((11, 16))
------> ;
KeywordLet((13, 4))
------> let
Identifier((13, 8))
------> suma
OperatorEqual((13, 13))
------> =
Identifier((13, 15))
------> numero1
OperatorPlus((13, 23))
------> +
Identifier((13, 25))
------> numero3
PunctuationSemiColon((13, 32))
------> ;
KeywordLet((14, 4))
------> let
Identifier((14, 8))
------> resta
OperatorEqual((14, 14))
------> =
Identifier((14, 16))
------> numero3
OperatorMinus((14, 24))
------> -
Identifier((14, 26))
------> numero1
PunctuationSemiColon((14, 33))
------> ;
KeywordLet((15, 4))
------> let
Identifier((15, 8))
------> division
OperatorEqual((15, 17))
------> =
Identifier((15, 19))
------> numero3
OperatorDiv((15, 27))
------> /
Identifier((15, 29))
------> numero1
PunctuationSemiColon((15, 36))
------> ;
KeywordLet((16, 4))
------> let
Identifier((16, 8))
------> multiplicacion
OperatorEqual((16, 23))
------> =
Identifier((16, 25))
------> numero1
OperatorMult((16, 33))
------> *
Identifier((16, 35))
------> numero3
PunctuationSemiColon((16, 42))
------> ;
KeywordLet((17, 4))
------> let
Identifier((17, 8))
------> modulo
OperatorEqual((17, 15))
------> =
Identifier((17, 17))
------> numero1
OperatorMod((17, 25))
------> %
Identifier((17, 27))
------> numero3
PunctuationSemiColon((17, 34))
------> ;
KeywordIf((19, 4))
------> if
PunctuationLParent((19, 7))
------> (
Identifier((19, 8))
------> resta
OperatorGreater((19, 14))
------> >
ConstantNumeric((19, 16))
------> 0
PunctuationRParent((19, 17))
------> )
PunctuationLCurly((19, 18))
------> {
Identifier((20, 8))
------> printf
PunctuationLParent((20, 14))
------> (
StringLiteral((20, 15))
------> "El número es positivo"
PunctuationRParent((20, 39))
------> )
PunctuationSemiColon((20, 40))
------> ;
PunctuationRCurly((21, 4))
------> }
KeywordElseIf((22, 4))
------> else if
PunctuationLParent((22, 12))
------> (
Identifier((22, 13))
------> resta
OperatorLess((22, 19))
------> <
ConstantNumeric((22, 21))
------> 0
PunctuationRParent((22, 22))
------> )
PunctuationLCurly((22, 23))
------> {
Identifier((23, 8))
------> printf
PunctuationLParent((23, 14))
------> (
StringLiteral((23, 15))
------> "El número es negativo"
PunctuationRParent((23, 39))
------> )
PunctuationSemiColon((23, 40))
------> ;
PunctuationRCurly((24, 4))
------> }
Identifier((25, 4))
------> else
PunctuationLCurly((25, 9))
------> {
Identifier((26, 8))
------> printf
PunctuationLParent((26, 14))
------> (
StringLiteral((26, 15))
------> "El número es 0"
PunctuationRParent((26, 32))
------> )
PunctuationSemiColon((26, 33))
------> ;
PunctuationRCurly((27, 4))
------> }
PunctuationRCurly((28, 0))
------> }
some error occurred: NonSuportedCharacter

------> $
KeywordFunc((30, 4))
------> func
Identifier((30, 9))
------> printf
PunctuationLParent((30, 15))
------> (
Identifier((30, 16))
------> string
SpecialCharColon((30, 22))
------> :
Identifier((30, 24))
------> hola
PunctuationRParent((30, 28))
------> )
PunctuationLCurly((30, 30))
------> {
PunctuationRCurly((33, 4))
------> }
